
paths:
  /:
    get:
      summary: Get users entry
      responses:
        200:
          description: OK
          schema:
            type: string
  /allUsers:
    get:
      summary: Get all users
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
  /login:
    post:
      summary: User login
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/LoginResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /register:
    post:
      summary: User registration
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/RegisterRequest"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/RegisterResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"


  /update:
    put:
      summary: Update user data
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UpdateRequest"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/UpdateResponse"
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /getByUserName/:
    get:
      summary: Get user by username
      parameters:
        - in: query
          name: userName
          type: string
          required: true
          description: The username of the user to retrieve
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /getUser:
    get:
      summary: Get current user
      security:
        - cookieAuth: []
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /follow:
    post:
      summary: Follow a user
      security:
        - cookieAuth: []
      parameters:
        - name: followerId
          in: body
          description: ID of the user to follow
          required: true
          schema:
            type: object
            properties:
              followerId:
                type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /getfollowers:
    get:
      summary: Get the followers of the current user
      security:
        - cookieAuth: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              followers:
                type: array
                items:
                  $ref: "#/definitions/User"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /unfollow:
    post:
      summary: Unfollow a user
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: body
          description: ID of the user to unfollow
          required: true
          schema:
            type: object
            properties:
              userId:
                type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found or not followed
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /deleteUser:
    delete:
      summary: Delete the current user
      security:
        - cookieAuth: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /addRecipe/{userId}:
    post:
      summary: Add a recipe to a user
      parameters:
        - name: userId
          in: path
          description: ID of the user to add the recipe to
          required: true
          type: string
        - name: recipeId
          in: body
          description: ID of the recipe to add
          required: true
          schema:
            type: object
            properties:
              recipeId:
                type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /dropRecipe/{userId}:
    post:
      summary: Remove a recipe from a user
      parameters:
        - name: userId
          in: path
          description: ID of the user to remove the recipe from
          required: true
          type: string
        - name: recipeId
          in: body
          description: ID of the recipe to remove
          required: true
          schema:
            type: object
            properties:
              recipeId:
                type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"


components:
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
          description: Vorname des Benutzers
        lastName:
          type: string
          description: Nachname des Benutzers
        userName:
          type: string
          description: Benutzername des Benutzers
        emailAddress:
          type: string
          description: E-Mail-Adresse des Benutzers
        password:
          type: string
          description: Passwort des Benutzers
        followers:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: Liste der Follower des Benutzers
        myRecipes:
          type: array
          items:
            type: string
            description: ID des Rezepts
          description: Liste der Rezepte des Benutzers

  /setCookingTogetherDate:
    put:
      summary: Set cooking together date for a user
      parameters: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
              user:
                $ref: "#/definitions/User"
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /removeCookingTogetherDate:
    delete:
      summary: Remove cooking together date for a user
      parameters: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
              user:
                $ref: "#/definitions/User"
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /getEmailAddress/{userId}:
    get:
      summary: Get email address for a user
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
              email:
                type: string
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /getUserCTG:
    get:
      summary: Get users with cooking together date
      parameters: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
              users:
                type: array
                items:
                  $ref: "#/definitions/User"
        404:
          description: No users found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /getUserNameById/{userId}:
    get:
      summary: Get username by ID
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
              userName:
                type: string
        404:
          description: User not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

  /getMyRecipes:
    get:
      summary: Get recipes for the authenticated user
      parameters: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
              myRecipes:
                type: array
                items:
                  $ref: "#/definitions/Recipe"
        404:
          description: No recipes found for the user
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/Error"

securityDefinitions:
  cookieAuth:
    type: apiKey
    name: _auth
    in: cookie


definitions:
  LoginRequest:
    type: object
    properties:
      userName:
        type: string
      password:
        type: string
  LoginResponse:
    type: object
    properties:
      success:
        type: boolean
      message:
        type: string
      userId:
        type: string
      token:
        type: string
  Error:
    type: object
    properties:
      error:
        type: string
  RegisterRequest:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      userName:
        type: string
      emailAddress:
        type: string
      password:
        type: string
  RegisterResponse:
    type: object
    properties:
      message:
        type: string
      user:
        $ref: "#/definitions/User"
  User:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      userName:
        type: string
      emailAddress:
        type: string
      password:
        type: string
  Recipe:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      description:
        type: string
      ingredients:
        type: array
        items:
          type: string
      instructions:
        type: string
  UpdateRequest:
    type: object
    properties:
      passwordUnhash:
        type: string
      userName:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      emailAdrress:
        type: string
  UpdateResponse:
    type: object
    properties:
      message:
        type: string
      user:
        $ref: "#/definitions/User"